<?php

namespace App\Service\LLM;

use Generator;

class HumanResponseService extends AbstractLLMService
{
    /**
     * Generate human-readable response from SQL results using LLM
     */
    public function generateHumanResponse(
        string $originalQuestion,
        array $sqlResults,
        string $executedSql,
        string $intent
    ): string {
        if ($intent === IntentService::INTENT_DOWNLOAD) {
            return $this->generateDownloadResponse($sqlResults);
        }

        $systemPrompt = $this->buildSystemPromptForHumanResponse();
        $userPrompt = $this->buildUserPrompt($originalQuestion, $sqlResults, $executedSql);

        return $this->callLlm($systemPrompt, $userPrompt);
    }

    /**
     * Generate streaming response from SQL results using LLM
     * @return Generator<string> Yields string chunks
     */
    public function generateStreamingResponse(string $question, array $sqlResults, string $validatedSql, string $intent): Generator
    {
        if ($intent === IntentService::INTENT_DOWNLOAD) {
            yield from $this->generateStreamingDownloadResponse($sqlResults);
        } else {
            yield from $this->generateStreamingHumanResponse(
                $question,
                $sqlResults,
                $validatedSql,
            );
        }
    }

    /**
     * Generate streaming response from ES query results using LLM
     * @return Generator<string> Yields string chunks
     */
    public function generateElasticsearchStreamingResponse(string $question, array $results, string $query, string $intent): Generator
    {
        if ($intent === IntentService::INTENT_CHITCHAT) {
            yield from $this->generateStreamingChitchatResponse();
        } elseif ($intent === IntentService::INTENT_DOWNLOAD) {
            yield from $this->generateStreamingDownloadResponseFromES($results);
        } else {
            $systemPrompt = $this->buildSystemPromptForElasticsearchResponse();
            $userPrompt = $this->buildElasticsearchUserPrompt($question, $results, $query);
            // Call LLM with stream mode
            yield from $this->callLlmStreaming($systemPrompt, $userPrompt);
        }

    }

    private function generateStreamingHumanResponse(
        string $originalQuestion,
        array $sqlResults,
        string $executedSql
    ): Generator {
        $systemPrompt = $this->buildSystemPromptForHumanResponse();
        $userPrompt = $this->buildUserPrompt($originalQuestion, $sqlResults, $executedSql);

        // Call LLM with stream mode
        yield from $this->callLlmStreaming($systemPrompt, $userPrompt);
    }

    private function generateStreamingDownloadResponse(array $sqlResults): Generator
    {
        $response = $this->generateDownloadResponse($sqlResults);
        $words = explode(' ', $response);

        foreach ($words as $index => $word) {
            yield $word . ($index < count($words) - 1 ? ' ' : '');

            // D√©lai entre les mots pour simuler la frappe
            usleep(100000); // 100ms entre chaque mot
        }
    }

    private function generateDownloadResponse(array $sqlResults): string
    {
        $count = count($sqlResults);

        return match (true) {
            $count === 0 => "Aucun rapport trouv√© correspondant √† votre demande.",
            $count === 1 => "J'ai trouv√© 1 rapport correspondant √† votre demande. Pr√©paration du t√©l√©chargement...",
            default => "J'ai trouv√© {$count} rapports correspondant √† votre demande. Cela peut prendre quelques instants pour g√©n√©rer l'archive..."
        };
    }

    private function buildUserPrompt(string $originalQuestion, array $sqlResults, string $executedSql): string
    {
        return sprintf(
            "Question originale: %s\n\nRequ√™te SQL ex√©cut√©e: %s\n\nR√©sultats: %s\n\nFournis une r√©ponse claire et compr√©hensible.",
            $originalQuestion,
            $executedSql,
            json_encode($sqlResults, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)
        );
    }

    private function buildSystemPromptForHumanResponse(): string
    {
        return "Tu es un assistant sp√©cialis√© dans le b√¢timent. Tu dois transformer des r√©sultats de base de donn√©es en r√©ponses compr√©hensibles pour des utilisateurs non techniques.\n\n" .
            "TYPES DE DEMANDES:\n" .
            "1. INFORMATION (combien, liste, r√©sum√©, qui, quand, etc.) ‚Üí Fournis une r√©ponse textuelle normale\n" .
            "2. T√âL√âCHARGEMENT (t√©l√©charger, r√©cup√©rer, envoyer, exporter des fichiers/rapports) ‚Üí Ajoute '[DOWNLOAD_REQUEST]' √† la fin de ta r√©ponse\n\n" .
            "R√àGLES M√âTIER:\n" .
            "- Par d√©faut, consid√®re uniquement les √©l√©ments actifs (is_enabled = TRUE, deleted_at IS NULL)\n" .
            "- Si l'utilisateur demande explicitement 'tous' ou 'y compris supprim√©s', alors inclus tout\n" .
            "- Sois pr√©cis dans tes r√©ponses et utilise les termes m√©tier appropri√©s\n";
    }

    private function buildSystemPromptForElasticsearchResponse(): string
    {
        return <<<SYSTEM_PROMPT
Tu es un assistant sp√©cialis√© dans le b√¢timent. Tu dois transformer des r√©sultats Elasticsearch en r√©ponses compr√©hensibles pour des utilisateurs non techniques.

TYPES DE DEMANDES:
1. INFORMATION (combien, liste, r√©sum√©, qui, quand, etc.) ‚Üí Fournis une r√©ponse textuelle normale
2. T√âL√âCHARGEMENT (t√©l√©charger, r√©cup√©rer, envoyer, exporter des fichiers/rapports) ‚Üí Ajoute '[DOWNLOAD_REQUEST]' √† la fin de ta r√©ponse

STRUCTURE DES DONN√âES ELASTICSEARCH:
- total: nombre total de r√©sultats trouv√©s
- results: liste des documents avec score et donn√©es
- aggregations: statistiques et regroupements
- took: temps d'ex√©cution en millisecondes

üö® R√àGLES CRITIQUES D'INTERPR√âTATION DES R√âSULTATS:

1. COMPTAGE D'AFFAIRES:
   - Question type: 'Combien d'affaires...'
   - Lire: results.total (nombre d'affaires trouv√©es)
   - R√©ponse: 'Il y a X affaires...'

2. COMPTAGE DE RAPPORTS:
   - Question type: 'Combien de rapports...'
   - Lire: aggregations.reports_count.value (somme des rapports)
   - NE PAS lire results.total (qui compte les affaires, pas les rapports)
   - R√©ponse: 'Il y a X rapports au total...'

3. COMPTAGE D'AVIS:
   - Question type: 'Combien d'avis Favorable/Suspendu...'
   - Lire: aggregations.reports.reviews.count_avis.doc_count
   - NE PAS lire results.total (qui compte les affaires contenant ces avis)
   - R√©ponse: 'Il y a X avis [TYPE] dans...'
   
4. COMPTAGE D'AVIS GLOBAL:
   - Question type: 'Combien d'avis au total...'
   - Lire: aggregations.reports.reviews.count_avis.value (aggregation nested)
   - NE PAS lire aggregations.total_reviews.value (champ pr√©-calcul√© d√©faillant)
   - R√©ponse: 'Il y a X avis au total...'

5. RECHERCHE/LISTING:
   - Question type: 'Liste des...', 'Quelles sont...'
   - Lire: results (array des documents)
   - Analyser le contenu des documents pour extraire les informations demand√©es

6.. STATISTIQUES/AGR√âGATIONS:
   - Question type: 'R√©partition par...', 'Statistiques...'
   - Lire: aggregations.{nom_aggregation}.buckets
   - Pr√©senter sous forme de liste ou tableau

EXEMPLES D'INTERPR√âTATION:

EXEMPLE 1 - Comptage de rapports:
Question: 'Combien de rapports au total ?'
R√©sultat ES: {
  'total': 1409,
  'aggregations': {'reports_count': {'value': 10686.0}}
}
R√©ponse CORRECTE: 'Il y a 10 686 rapports au total dans la base.'
R√©ponse INCORRECTE: 'Il y a 1409 rapports.' (c'est le nombre d'affaires!)

EXEMPLE 2 - Comptage d'avis:
Question: 'Combien d'avis Suspendu dans l'affaire 1360 ?'
R√©sultat ES: {
  'total': 1,
  'aggregations': {
    'reports': {
      'reviews': {
        'count_avis': {'doc_count': 3}
      }
    }
  }
}
R√©ponse CORRECTE: 'Il y a 3 avis Suspendu dans l'affaire 1360.'
R√©ponse INCORRECTE: 'Il y a 1 avis.' (c'est le nombre d'affaires!)

EXEMPLE 3 - Comptage d'affaires:
Question: 'Combien d'affaires pour le client APHP ?'
R√©sultat ES: {'total': 245}
R√©ponse CORRECTE: 'Il y a 245 affaires pour le client APHP.'

R√àGLES M√âTIER:
- Les donn√©es proviennent d'un index Elasticsearch 'client_case'
- Chaque document repr√©sente une affaire avec ses rapports et avis
- Les champs calcul√©s (totalReports, totalReviews) sont pr√©-agr√©g√©s
- Sois pr√©cis dans tes r√©ponses et utilise les termes m√©tier appropri√©s
- Pour les aggregations, explique les statistiques de mani√®re claire
- TOUJOURS v√©rifier le type de question pour savoir o√π chercher la bonne valeur
- En cas de doute, pr√©cise quelle valeur tu utilises dans ta r√©ponse
SYSTEM_PROMPT;
    }

    private function buildElasticsearchUserPrompt(
        string $originalQuestion,
        array $elasticsearchResults,
        string $query
    ): string {
        $prompt = "QUESTION UTILISATEUR: {$originalQuestion}\n\n";

        $prompt .= "REQU√äTE ELASTICSEARCH EX√âCUT√âE:\n";
        $prompt .= $query . "\n\n";

        $prompt .= "R√âSULTATS ELASTICSEARCH:\n";
        $prompt .= "- Total trouv√©: " . ($elasticsearchResults['total'] ?? 0) . "\n";
        $prompt .= "- Temps d'ex√©cution: " . ($elasticsearchResults['took'] ?? 0) . "ms\n";
        $prompt .= "- R√©sultats retourn√©s: " . count($elasticsearchResults['results'] ?? []) . "\n\n";

        // Ajouter les agr√©gations si pr√©sentes
        if (!empty($elasticsearchResults['aggregations'])) {
            $prompt .= "AGR√âGATIONS:\n";
            $prompt .= json_encode($elasticsearchResults['aggregations'], JSON_PRETTY_PRINT) . "\n\n";
        }

        // Ajouter un √©chantillon des r√©sultats si pr√©sents
        if (!empty($elasticsearchResults['results'])) {
            $prompt .= "√âCHANTILLON DES R√âSULTATS (premiers 5):\n";
            $sampleResults = array_slice($elasticsearchResults['results'], 0, 5);
            foreach ($sampleResults as $index => $result) {
                $prompt .= "Document " . ($index + 1) . ":\n";
                $prompt .= json_encode($result['data'], JSON_PRETTY_PRINT) . "\n\n";
            }
        }

        $prompt .= "Transforme ces donn√©es techniques en r√©ponse claire et compr√©hensible pour un utilisateur non technique.";

        return $prompt;
    }

    private function generateStreamingDownloadResponseFromES(array $results): Generator
    {
        $totalReport = $results['total'] ?? 0;
        $totalReportFound = count($results['results'] ?? []);

        // Compter le nombre total de fichiers dans les affaires retourn√©es
        $totalFiles = 0;
        foreach ($results['results'] ?? [] as $result) {
            $data = $result['data'];
            $totalFiles += count($data['reports'] ?? []);
        }

        // G√©n√©rer la r√©ponse directement avec contexte
        $response = match (true) {
            $totalReport === 0 => "Aucun rapport trouv√© correspondant √† votre demande.",
            $totalFiles === 1 => "J'ai trouv√© 1 rapport correspondant √† votre demande. Pr√©paration du t√©l√©chargement...",
            $totalReportFound < $totalReport => "J'ai trouv√© {$totalFiles} rapports dans les {$totalReportFound} premi√®res affaires (sur {$totalReport} au total). Pour r√©cup√©rer plus de fichiers, pr√©cisez votre recherche par r√©f√©rence d'affaire. Cela peut prendre quelques instants pour g√©n√©rer l'archive...",
            default => "J'ai trouv√© {$totalFiles} rapports correspondant √† votre demande. Cela peut prendre quelques instants pour g√©n√©rer l'archive..."
        };

        // Simuler le streaming en d√©coupant par mots
        $words = explode(' ', $response);
        foreach ($words as $index => $word) {
            yield $word . ($index < count($words) - 1 ? ' ' : '');
            usleep(10000); // 50ms entre chaque mot
        }
    }

    private function generateStreamingChitchatResponse(): Generator
    {
        $response = "Bonjour ! Je vous remercie pour votre message. Je suis con√ßu sp√©cifiquement pour analyser vos donn√©es m√©tier (affaires, rapports, avis) et ne peux pas engager de conversation g√©n√©rale. Comment puis-je vous aider avec vos donn√©es professionnelles ?";
        $words = explode(' ', $response);
        foreach ($words as $index => $word) {
            yield $word . ($index < count($words) - 1 ? ' ' : '');
            usleep(10000); // 50ms entre chaque mot
        }
    }
}